Summary,Issue key,Issue id,Issue Type,Status,Project key,Project name,Project type,Project lead,Project description,Project url,Priority,Resolution,Assignee,Reporter,Creator,Created,Updated,Last Viewed,Resolved,Affects Version/s,Fix Version/s,Due Date,Votes,Labels,Description,Environment,Original Estimate,Remaining Estimate,Time Spent,Work Ratio,Σ Original Estimate,Σ Remaining Estimate,Σ Time Spent,Security Level,Attachment,Custom field (Attachment count),Custom field (Blog - New Blog Administrators),Custom field (Blog - New Blog PMC),Custom field (Blog - Write access),Custom field (Blog Administrator?),Custom field (Blogs - Admin for blog),Custom field (Blogs - Email Address),Custom field (Blogs - Existing Blog Access Level),Custom field (Blogs - Existing Blog Name),Custom field (Blogs - New Blog Write Access),Custom field (Blogs - Username),Custom field (Bug Category),Custom field (Bugzilla - Email Notification Address),Custom field (Bugzilla - List of usernames),Custom field (Bugzilla - PMC Name),Custom field (Bugzilla - Project Name),Custom field (Bugzilla Id),Custom field (Change Category),Custom field (Complexity),Custom field (Date of First Response),Custom field (Discovered By),Custom field (Docs Text),Custom field (Enable Automatic Patch Review),Custom field (Epic Link),Custom field (Existing GitBox Approval),Custom field (External issue ID),Custom field (External issue URL),Custom field (Git Notification Mailing List),Custom field (Git Repository Import Path),Custom field (Git Repository Name),Custom field (Git Repository Type),Custom field (GitHub Options),Custom field (Github Integration),Custom field (Github Integrations - Other),Custom field (Global Rank),Custom field (INFRA - Subversion Repository Path),Custom field (Initial Confluence Contributors),Custom field (Last public comment date),Custom field (Machine Readable Info),Custom field (New-TLP-TLPName),Custom field (Priority),Custom field (Project),Custom field (Protected Branch),Custom field (Rank),Custom field (Rank (Obsolete)),Custom field (Severity),Custom field (Severity),Custom field (Source Control Link),Custom field (Space Description),Custom field (Space Key),Custom field (Space Name),Custom field (Test and Documentation Plan),Custom field (Testcase included),Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment
CVE-2016-1000031 - Apache Commons FileUpload DiskFileItem File Manipulation Remote Code Execution,FILEUPLOAD-279,13020471,Bug,Closed,FILEUPLOAD,Commons FileUpload,software,issues@commons.apache.org,,http://commons.apache.org/fileupload/,Critical,Fixed,,mweggen,mweggen,14/Nov/16 10:33,05/Feb/19 14:11,02/Jun/19 17:58,06/Jun/17 15:32,1.3.2,1.3.3,,4,security,"http://www.tenable.com/security/research/tra-2016-12

Summary

There exists a Java Object in the Apache Commons FileUpload library that can be manipulated in such a way that when it is deserialized, it can write or copy files to disk in arbitrary locations. Furthermore, while the Object can be used alone, this new vector can be integrated with ysoserial to upload and execute binaries in a single deserialization call. This may or may not work depending on an application's implementation of the FileUpload library.

Background

In late 2015 FoxGlove Security released a write up on using Chris Frohoff’s yososerial tool to gain remote code execution on a variety of commercial products, based on a presentation at AppSec Cali in January, 2015. The ysoserial tool uses “gadgets” in Apache Commons Collections, Groovy, and Spring that do “unexpected” things during deserialization. Specifically, the ysoserial payloads eventually execute Runtime.getRuntime().exec() allowing for remote Java code execution.

The Apache Commons project maintains a library called “FileUpload” to make “it easy to add robust, high-performance, file upload capability to your servlets and web applications.” One of the classes in the FileUpload library is called “DiskFileItem”. A DiskFileItem is used to handle file uploads. Interestingly, DiskFileItem is serializable and implements custom writeObject() and readObject() functions.

DiskFileItem’s readObject Implementation

Here is the implementation that currently exists at the projects repository tip (as of 1/28/16):


632    private void readObject(ObjectInputStream in)
633            throws IOException, ClassNotFoundException {
634        // read values
635        in.defaultReadObject();
636
637        /* One expected use of serialization is to migrate HTTP sessions
638         * containing a DiskFileItem between JVMs. Particularly if the JVMs are
639         * on different machines It is possible that the repository location is
640         * not valid so validate it.
641         */
642        if (repository != null) {
643            if (repository.isDirectory()) {
644                // Check path for nulls
645                if (repository.getPath().contains(""\0"")) {
646                    throw new IOException(format(
647                            ""The repository [%s] contains a null character"",
648                            repository.getPath()));
649                }
650            } else {
651                throw new IOException(format(
652                        ""The repository [%s] is not a directory"",
653                        repository.getAbsolutePath()));
654            }
655        }
656
657        OutputStream output = getOutputStream();
658        if (cachedContent != null) {
659            output.write(cachedContent);
660        } else {
661            FileInputStream input = new FileInputStream(dfosFile);
662            IOUtils.copy(input, output);
663            IOUtils.closeQuietly(input);
664            dfosFile.delete();
665            dfosFile = null;
666        }
667        output.close();
668
669        cachedContent = null;
670    }
This is interesting due to the apparent creation of files. However, after analyzing the state of DiskFileItem after serialization it became clear that arbitrary file creation was not supposed to be intended:

dfos (a type of OutputStream) is transient and therefore it is not serialized. dfos is regenerated by the getOutputStream() call above (which also generates the new File to write out to).
The “repository” (or directory that the file is written to) has to be valid at the time of serialization in order for successful deserialization to occur.
If there is no “cachedContent” then readObject() tries to read in the file from disk.
That filename is always generated via getOutputStream.
Serialized Object Modification

The rules listed above do not take into account that someone might modify the serialized data before it is deserialized. Three important elements get serialized that we can modify:

The repository path (aka the directory that the file is read/written from).
If there is cachedContent (i.e. data that didn’t get written to the file) then that gets serialized
If there is no cachedContent (i.e. all data was written to disk) the full path to the output file exists.
The threshold value that controls if “cachedContent” is written to disk or not.
Modifying these three elements in the serialized object gives us the ability to:

Create files wherever we have permission on the system. The caveat here is that we only have control of the file path and not the final filename.
Copy the contents of files from one file on the system to a location we specify (again we only control the directory path and not the filename). This will also attempt to delete the file we copy from.. so be careful.",,,,,,,,,,15/Nov/16 02:50;fifalover;fix2.patch;https://issues.apache.org/jira/secure/attachment/12838910/fix2.patch,1.0,,,,,,,,,,,,,,,,,,,2016-11-15 01:38:27.462,,,false,,,,,,,,,,,,9223372036854775807,,,Tue Feb 05 14:11:38 UTC 2019,,,,,,0|i36a9r:,9223372036854775807,,,,,,,,,"15/Nov/16 01:38;fifalover;I noticed that in the master branch, back in May, there were some commits to remove Serializable from DiskFileItem. That would seem to fix this vulnerability. What if we backported that to the 1.3.x branch?",15/Nov/16 01:58;ggregory;Patches welcome!,"15/Nov/16 02:24;fifalover;First patch attempt, pulling fixes from the master branch.","15/Nov/16 02:27;fifalover;Looking back at the patch, it's a lot larger than I expected. I'm wondering if my usual code formatter or something else the IDE did (end of line changes) made the change larger than expected. I'll see if I can try that again.","15/Nov/16 02:50;fifalover;I reapplied the fixes on a clean copy, and the patch looks a lot better this time. I'll delete the original one, just to remove confusion.","15/Nov/16 07:25;markt;-1 to back-porting since it breaks backwards compatibility.

This was discussed at the time and the security hardening changes were applied only to trunk because of backwards compatibility concerns.

To re-iterate what has been said elsewhere. Java (de)serialization is inherently dangerous. It should only be performed from trusted sources or after appropriate validation that only safe classes are being used. Applications that fail to do this are open to all sorts of vulnerabilities.","15/Nov/16 18:30;fifalover;Are you saying it breaks backwards compatibility because the consuming applications may serialize DiskFileItem themselves?

I'm trying to be practical here. I have a release going out in a matter of days, and while the only deserializing from trusted sources or other mitigation techniques may be the best solution, that's too risky and we simply don't have the time. If I need to, I'll build my own version of this library with the patch. But, obviously, if you're saying there's a problem with that patch, then I need to find some other solution.","15/Nov/16 18:59;jochen@apache.org;Chris, we are preparing an alternative solution. But pushing out a release, and all that, needs time. So, please be a bit patient.
",23/Nov/16 22:50;hgschmie;you should also remove the serialVersionUID (https://github.com/apache/commons-fileupload/blob/7b201e44962c99cf4019e137aee9ccc0273c3ab1/src/main/java/org/apache/commons/fileupload/disk/DiskFileItem.java#L80-L83),"25/Nov/16 04:56;taromaru;Chris, if an application deserializes data from an untrusted source, that is an application vulnerability.
Even if commons-fileupload isn't used, when using a class in JDK, it's possible to attack.

Please see following.
 * https://gist.github.com/coekie/a27cc406fc9f3dc7a70d
 * https://www.owasp.org/index.php/Deserialization_of_untrusted_data

The 1st link is very easy to understand.
The reply(19/Nov/15)(2015/11/19) to me at https://issues.apache.org/jira/browse/COLLECTIONS-580 includes this link.
The 2nd link also includes the 1st link.
(""HashSet Billion-Laughs Style DoS example by Wouter Coekaerts"")
","30/Nov/16 02:31;fifalover;I understand the larger problem, and that's something that I can address as a developer in code that I write. However, what do you tell someone in the operations side of things? They use tools that scan the software that's installed to find potential security vulnerabilities and something like this issue comes up. They're not interested in this larger issue. They just need that library patched so their security dashboard shows green again.

Now that I'm aware of this style of attack, I can look out for it in code that I write and take the kind of precautions described in those links. On the other hand, I think taking a belt-and-suspenders approach here is appropriate. We can do both things.

Also means one more thing when evaluating 3rd-party code. In some cases, we may not be using FileUpload directly but it is a transitive dependency. We may not even know if object deserialization is going on, much less if it's from trusted sources.","30/Nov/16 07:05;taromaru;> However, what do you tell someone in the operations side of things?
> They use tools that scan the software that's installed to find potential security vulnerabilities and something like this issue comes up.
> They're not interested in this larger issue. They just need that library patched so their security dashboard shows green again.
A tool may not always be judged properly.
A person has to confirm the validity of the judgement of a tool.

Even if indication of a tool becomes green, it may not be proper.

If the (Disk)FileItem will be not Serializable,
a JavaBean including (Disk)FileItem will fail to serialize.
(Strictly the JavaBean will be not the ""JavaBeans"".)

When setAttribute such JavaBean or (Disk)FileItem to the session, the session replication will be failed.
","09/Jan/17 15:16;r.oosterholt;When searching for a fix for this bug, I've found a commit related to this issue.
See [branch 1.3|https://git-wip-us.apache.org/repos/asf?p=commons-fileupload.git;a=shortlog;h=refs/heads/b1_3]:
Especially [revision 388e824518697c2c8f9f83fd964621d9c2f8fc4c|https://git-wip-us.apache.org/repos/asf?p=commons-fileupload.git;a=commit;h=388e824518697c2c8f9f83fd964621d9c2f8fc4c]. This commit disables deserialyzing by default (enable by setting system properties with a specific naming convention). This seems to 'fix' FILEUPLOAD-279 for now.

When can we expect a release of Apache Commons Fileupload 1.3.3?","11/Apr/17 15:54;marks;Is there any info on when a solution might be available?  Be it a fix or the ""alternative solution"" mentioned in the last comment from 15th Nov 2016.

Currently all versions of commons-fileupload up to and including 1.3.2 are generating critical threat alerts from Sonatype Nexus IQ (and presumably from alternatives such as Whitesource or Black Duck Hub).

",27/Apr/17 07:26;Pegasus;Is there any fix solution available ? help ... ,31/May/17 13:31;ahuegen;Please release the fix.,31/May/17 21:31;ggregory;I'll ping the ML...,06/Jun/17 15:32;chtompki;Working on the release now.,"24/Jun/17 14:10;marks;Thanks very much for the release. 1.3.3 is [available|http://repo1.maven.org/maven2/commons-fileupload/commons-fileupload/1.3.3/] in Maven Central.

Just one thing...  1.3.3 has not yet been released in JIRA.","25/Jun/17 05:13;kinow;Updated the version in JIRA, with release date the same as the announce e-mail in the commons mailing list.","06/Nov/18 20:20;makemp;What is the best way to find this vulnerability across environment?

Is it safe to say any version of commons-fileupload pre 1.3.* on Struts 1 &2 is vulnerable?","06/Nov/18 22:43;b.eckenfels;The „safe“ thing to do is, if you are in doubt then assume you need to upgrade to not be vulnerable. (And it reduces the amount of justification and explaining you have to do when you are regularly bombarded with scan reports and requests for asking for exceptions to keep old, known vulnerable versions around)","07/Nov/18 00:40;jackjohnson12;If you can't upgrade, what things should you monitor to reduce the risk of this being exploited. System is going to be EOL soon, however, it is still critical and an upgrade isn't viable. ",13/Nov/18 01:58;Gojo;Do I need to upgrade my commons-fileupload-1.3.2.jar even if I'm not using Apache Struts?,"13/Nov/18 02:49;b.eckenfels;This is not (directly) related to Struts.

The DiskFileItem class lingers around in your applications and this adds a trivial Widget to be exploited by serialisation attacks. It might not be the only vector, and deserialising untrusted data is fatal in itself, hoewever you would still be guilty of not having updated a class with known vulnerabilities. So just update.

if you cant update (for whatever reason) then the only thing to mitigate you can do is to actually review all usage of serialisation in your apps. You should probably do that anyway.

it might be possible that you notice upload_uuid_id.tmp file in random directories, but they do only show up for short times if it is used to generate files.

I would lIke like to better understand why can’t people just upgrade, is there something we can make it easier?","13/Nov/18 06:11;jochen@apache.org;It is escapes me, why there is a discussion ongoing with this issue having been resolved more than a year before. As for Struts: Of course, this is not a Struts issue. Except that Struts (AFAIK) distributes commons-fileupload. In other words: Just replace commons-fileupload 1.3.2 with 1.3.3, and you are done. They are binary compatible, so  Struts will be just as happy.

 

 ","02/Dec/18 10:28;AdamP;Hello,

There is ""Affected versions: 1.3.2"" however on other websites like:
[https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2016-1000031]
[https://nvd.nist.gov/vuln/detail/CVE-2016-1000031
]

all versions before 1.3.3 are vulnerable. What versions are impacted by this bug?

Thanks,
Adam","02/Dec/18 10:48;jochen@apache.org;*Exactly,* as is written in your quote, and in my comment above: Version 1.3.3 is *not* affected. All previous versions are. Why are you asking?

 

 ","02/Dec/18 11:06;AdamP;Jochen,

Thank you for replying so quickly. I am asking because in the affected versions I see only 1.3.2 and also under the link:
[https://www.cvedetails.com/vulnerability-list/vendor_id-45/product_id-24746/version_id-143021/Apache-Commons-Fileupload-1.2.html]

this CVE is not listed. Just got confused if before means only 1.3.2 or all versions before.

Thank you very much!

Adam","02/Dec/18 19:40;jochen@apache.org;Adam,

 

I do not feel responsible for external sites like cvedetails.com. To me, the authoritative information is available from

 

[https://commons.apache.org/proper/commons-fileupload/download_fileupload.cgi]

and 

 

[https://commons.apache.org/proper/commons-fileupload/security-reports.html#Apache_Commons_FileUpload_Security_Vulnerabilities]

 

which both completely match, what I am saying.

 ","06/Dec/18 05:19;rasmita;Is this bug fix is ported to 1.4 SNAPSHOT build.

We are currently using _commons-fileupload-1.4-20160119.063138-53. Is this security bug is fixed in this build or we have to upgrade to some other build, please suggest._

_If this issue is fixed in 1.4, please point me to the build location from where I can pick the jar_","06/Dec/18 12:31;b.eckenfels;[~rasmita] it looks like the fix is missing in master/b1_4.

(There are other problems with the master, like a broken changes.xml). I would think sticking with 1.3.3 is better until a official 1.4 release.)","06/Dec/18 12:47;jochen@apache.org;Rasmita,

 

as I have no idea, who created that file, when, and how, I couldn't really tell. All I can say: The fix was committed on 12-May-2016, 13:39 UTC. (See [https://git-wip-us.apache.org/repos/asf?p=commons-fileupload.git;a=commitdiff;h=02f6b2c4ef9aebf9cf8e55de8b90e73430b69385] for details.) Or, in other words: Any version, properly created from the genuine source tree after that point, should be safe. AFAIK, we do not offer automated snapshot builds, so your only choice is to build a snapshot for yourself.

 ","06/Dec/18 12:50;b.eckenfels;[~jochen@apache.org] I dont think thats entirely correct, I dont see the orifginal system-property changes in the master file and the changes.xml is messed up. Is the 1.4 branch supposed to have a ""different"" solution than _this_ 1.3.3 fix?","06/Dec/18 13:07;erans;bq. AFAIK, we do not offer automated snapshot builds

Some components do, through Jenkins; see e.g.
  https://repository.apache.org/content/repositories/snapshots/org/apache/commons/commons-rng-sampling/1.2-SNAPSHOT/
but the lack of synergies between components' maintenance tasks makes it difficult to have up-to-date configurations that produce artefacts in a timely manner and at expected places...
",06/Dec/18 13:13;b.eckenfels;ASF bylaws makes it hard to offer snapshots and I would agree that we should not do it. (if there is a good reason for users to request 1.4 snapshots it might be time for a release?). Should we discuss this on the users or dev mailing list?,"06/Dec/18 13:53;erans;bq. ASF bylaws makes it hard to offer snapshots

?
Jenkins produces them after a successful build.

bq. we should not do it.

Why?
They come with all the caveats: Not an official release, thus no support whatsoever.
However, they might be helpful to *us* by providing an easy way for users to test the latest artefacts (and, hopefully, report problems).

bq. Should we discuss this on the users or dev mailing list?

Probably. ;-)","06/Dec/18 14:40;jochen@apache.org;Bernd,

 

indeed, the fix for master / 1.4 is different: In the future version, we didn't bother with binary compatibility. So, we simply let FileItem no longer implement java.io.Serializable. In the 1.3 branch, bc matters. So we check for a system property, and throw an exception at runtime.",06/Dec/18 15:25;ggregory;FWIW: I published a new {{1.4-SNAPSHOT}} to https://repository.apache.org/content/repositories/snapshots/commons-fileupload/commons-fileupload/,"07/Dec/18 04:39;rasmita;Please confirm, which build I can use, 1.4-SNAPSHOT latest or better to fall back to 1.3.3

Is CVE-2016-1000031 vulnerability is not present in ""commons-fileupload-1.4-20160119.063138-53.jar"" SNAPSHOT build, then I we don't need to upgrade the jar.
h1.  ","17/Dec/18 06:31;rasmita;Please confirm if this snapshot is safe to use, I am waiting for the input to upgrade the jar. Do the snapshot jar contains the fix for the issue.

Thanks

Rasmita","17/Dec/18 09:30;b.eckenfels;Snapshots are not released and therefore always ""use at own risk"", if you know the commit the snapshot is based upon you can check thesource yourself.",05/Feb/19 14:11;chtompki;1.4 Released
