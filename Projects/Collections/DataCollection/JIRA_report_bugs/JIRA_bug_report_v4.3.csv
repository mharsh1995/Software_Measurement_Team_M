Summary,Issue key,Issue id,Issue Type,Status,Project key,Project name,Project type,Project lead,Project description,Project url,Priority,Resolution,Assignee,Reporter,Creator,Created,Updated,Last Viewed,Resolved,Affects Version/s,Component/s,Component/s,Due Date,Votes,Description,Environment,Original Estimate,Remaining Estimate,Time Spent,Work Ratio,Σ Original Estimate,Σ Remaining Estimate,Σ Time Spent,Security Level,Custom field (Attachment count),Custom field (Blog - New Blog Administrators),Custom field (Blog - New Blog PMC),Custom field (Blog - Write access),Custom field (Blog Administrator?),Custom field (Blogs - Admin for blog),Custom field (Blogs - Email Address),Custom field (Blogs - Existing Blog Access Level),Custom field (Blogs - Existing Blog Name),Custom field (Blogs - New Blog Write Access),Custom field (Blogs - Username),Custom field (Bug Category),Custom field (Bugzilla - Email Notification Address),Custom field (Bugzilla - List of usernames),Custom field (Bugzilla - PMC Name),Custom field (Bugzilla - Project Name),Custom field (Bugzilla Id),Custom field (Change Category),Custom field (Complexity),Custom field (Date of First Response),Custom field (Discovered By),Custom field (Docs Text),Custom field (Enable Automatic Patch Review),Custom field (Epic Link),Custom field (Existing GitBox Approval),Custom field (External issue ID),Custom field (External issue URL),Custom field (Git Notification Mailing List),Custom field (Git Repository Import Path),Custom field (Git Repository Name),Custom field (Git Repository Type),Custom field (GitHub Options),Custom field (Github Integration),Custom field (Github Integrations - Other),Custom field (Global Rank),Custom field (INFRA - Subversion Repository Path),Custom field (Initial Confluence Contributors),Custom field (Last public comment date),Custom field (Machine Readable Info),Custom field (New-TLP-TLPName),Custom field (Priority),Custom field (Project),Custom field (Protected Branch),Custom field (Rank),Custom field (Rank (Obsolete)),Custom field (Severity),Custom field (Severity),Custom field (Source Control Link),Custom field (Space Description),Custom field (Space Key),Custom field (Space Name),Custom field (Test and Documentation Plan),Custom field (Testcase included),Comment
PatriciaTrie ignores trailing null characters in keys,COLLECTIONS-714,13231018,Bug,Open,COLLECTIONS,Commons Collections,software,issues@commons.apache.org,,http://commons.apache.org/collections/,Critical,,,rohanpadhye,rohanpadhye,30/Apr/19 23:11,03/May/19 05:39,13/Jun/19 01:57,,4.3,Collection,Map,,0,"In Java, strings are not null terminated. The string ""x"" (of length = 1 char) is different from the string ""x\u0000"" (of length = 2 chars). However, PatriciaTrie does not seem to distinguish between these strings.

To reproduce: 
{code:java}
public void testNullTerminatedKey1() {
    Map<String, Integer> map = new HashMap<>();
    map.put(""x"", 0);         // key of length 1
    map.put(""x\u0000"", 1);   // key of length 2
    map.put(""x\u0000y"", 2);  // key of length 3
    Assert.assertEquals(3, map.size());  // ok, 3 distinct keys

    PatriciaTrie<Integer> trie = new PatriciaTrie<>(map);
    Assert.assertEquals(3, trie.size());  // fail; actual=2
}{code}
In the above example, the resulting trie has only two keys: ""x\u0000"" and ""x\u0000y"". The key ""x"" gets overwritten. Here is another way to repro the bug: 
{code:java}
public void testNullTerminatedKey2() {
    PatriciaTrie<Integer> trie = new PatriciaTrie<>();
    trie.put(""x"", 0);
    Assert.assertTrue(trie.containsKey(""x"")); // ok
    trie.put(""x\u0000"", 1);
    Assert.assertTrue(trie.containsKey(""x"")); // fail
}
{code}
In the above example, the key ""x"" suddenly disappears when an entry with key ""x\u0000"" is inserted.

The PatriciaTrie docs do not mention anything about null-terminated strings. In general, I believe this also breaks the JDK Map contract since the keys ""x"".equals(""x\u0000"") is false. 

This bug was found automatically using JQF: [https://github.com/rohanpadhye/jqf].

 ",,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,9223372036854775807,,,Thu May 02 19:25:33 UTC 2019,,,,,,0|z02alk:,9223372036854775807,,,,,,,,,"02/May/19 19:25;rohanpadhye;Upon further investigation I noticed that the problem lies in the way PatriciaTrie uses the results of StringKeyAnalyzer.

The insertion of entry with key ""x\u0000"" when key ""x"" already exists, hits this path in AbstractPatriciaTrie.put():
{code:java}
} else if (KeyAnalyzer.isEqualBitKey(bitIndex)) {
    // This is a very special and rare case.

    /* REPLACE OLD KEY+VALUE */
    if (found != root) { // NOPMD
        incrementModCount();
        return found.setKeyValue(key, value);
    }
}
{code}
 

I'm not sure what the ""very special and rare case"" is that the original developer intended, but it incorrectly overwrites the found key ""x"" with new key ""x\u0000"".

The above branch is executed because the call to AbstractPatriciaTrie.bitIndex(""x"", ""x\u0000"") returns EQUAL_BIT_KEY, which seems incorrect. The bug may be rooted in the way StringKeyAnalyzer.bitIndex() handles cases where index1 >= endIndex1: with the placeholder value `0`, which is actually a valid character in Java.

I cannot think of a simple fix at the top of my head, since the entire XOR-based algorithm seems to rely on the assumption that two non-equal keys must have a bit-index where their corresponding bits differ. This algorithm does not consider the fact that two keys can be non-equal simply because they have different lengths."
